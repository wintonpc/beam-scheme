(define-syntax define #%define-transformer)

(define (list . L) L)
(define (string . L) (list->string L))
(define (vector . L) (list->vector L))
(define (string-append . L) (#%string-append L))
(define (gensym . L) (#%gensym L))
(define (generate-temporaries xs)
  (if (null? xs)
      '()
      (cons (gensym) (generate-temporaries (cdr xs)))))

(define #%or-transformer
  (lambda (x)
    (if (= (length x) 1)
        #f
        (let ((exp0 (car (cdr x)))
              (exps (cdr (cdr x))))
          (if (= (length x) 2)
              exp0
              (let ((t (gensym 't)))
                `(let ((,t ,exp0))
                   (if ,t ,t (or ,@exps)))))))))

(define-syntax or #%or-transformer)

(define #%and-transformer
  (lambda (x)
    (if (= (length x) 1)
        #t
        (let ((exp0 (car (cdr x)))
              (exps (cdr (cdr x))))
          (if (= (length x) 2)
              exp0
              (let ((t (gensym 't)))
                `(let ((,t ,exp0))
                   (if ,t (and ,@exps) ,t))))))))

(define-syntax and #%and-transformer)

(define (not x) (if x #f #t))

(define (map p ls)
  (if (null? ls)
      '()
      (cons (p (car ls)) (map p (cdr ls)))))
