- get psyntax working
  - string, string-append, string?, list->string, string->list
  - vectors (and reader macro)
    - vector, -length, -ref, -set!, vector?, list->vector
  - hashtables
    - make-hashtable, hashtable-set!, hashtable-ref, hashtable-delete!
  - or, and, not, eq?, equal?
  - symbol->string, string->symbol, symbol?
  - procedure?
  - comments
  - dotted pairs, improper lists
  - map (1-arg only)
  - apply
  - eval
  - lambda dot notation
  - letrec
  - define (scheme impl)
  - values, call-with-values
  - begin
- match (erlang impl)
- cond
- stream exception doesn't always kill process that made the stream ??
- replace STREAM_DONE with {ok, _} or end_of_stream return values.
- print primitive procedures nicely with their name

- make VM code for primitive procedures less sucky
- strings need to be differentiable from lists

read:

- Keep, Nanopass

- Waddell, Fixing Letrec

- Ghuloum, Fixing Letrec (reloaded)

- R. Kent Dybvig, Robert Hieb, and Carl Bruggeman. Syntactic
abstraction in Scheme. Lisp and Symbolic Computation 5, 4, pp. 83-110,
1992 (bibtex).

- Abdulaziz Ghuloum and R. Kent Dybvig. Implicit phasing for R6RS
libraries, Proceedings of the 12th ACM SIGPLAN International
Conference on Functional Programming, 303-314, September, 2007
(bibtex).

